interface ResponseMutation {
	message: String
	code: Int!
}


type Attraction {
  _id: ID!
  name: String!
  description: String
  price: Float
  type: String
}

input CreateAttractionInput {
	name: String!
	price: Float
	type: String
	description: String
	link: String
}

input SignInInput {
	email: String!
	password: String!
}

input SignUpInput {
	email: String!
	first_name: String
	last_name: String
	password: String!
	gender: Gender
	birthdate: Date
}

input BasketChoice {
	attraction_id: ID
	user_id: ID
	quantity: Int
}

input ValidateBasketInput {
	basket_id: ID
	user_id: ID
	state: String
}

input UpdateBasketInput {
    last_update_time: Date
    choices: [BasketChoice]
}

input CreateBasketInput {
	_id: ID
	user_id: ID
	choices: [BasketChoice]
}

input CreateTravelersPassesInput {
	_id: ID
	user_id: ID
	start_date: Date
	end_date: Date
	choices: [BasketChoice]
}

input BurnAttractionTicketInput {
	timestamp: Date,
	attraction_id: ID
	pass_id: ID
}

input CreatePaymentInput {
	amount: Float
}

type UserCredentials implements ResponseMutation {
	message: String
	code: Int!
	token: String
}

type UserTokenToId implements ResponseMutation {
	message: String
	code: Int!
	id: ID
}

type ResponseForCreate implements ResponseMutation {
	message: String,
	code: Int!,
	id: ID
}

type User {
  _id: ID!
  email: String!
  first_name: String
  last_name: String
  birthdate: Date
  gender: Gender
  type: UserType
}

type QrGenerator {
  value: String
}

enum Gender {
  M
  F
  O
}

enum UserType {
  STAFF
  MUNICIPALITY
  PARTNER
  TOURIST
}

type Query {
    getAttractionById(id: ID!): Attraction
    getAllAttractions(limit: Int, sortField: String, sortOrder: String): [Attraction]

    getUserById(id: ID!): User
    getAllUsers(limit: Int, sortField: String, sortOrder: String): [User]

    getQrValue(token: String): String
    readQr(data: String): User

	convertTokenToId(token: String): UserTokenToId
}

type Mutation {
	signIn(input: SignInInput!): UserCredentials
	signUp(input: SignUpInput!): UserCredentials

	createAttraction(input: CreateAttractionInput!): ResponseForCreate
    generateQr(input: ID!): QrGenerator

	createBasket(input: CreateBasketInput!): ResponseForCreate
	updateBasket(input: UpdateBasketInput!): ResponseForCreate
	validateBasket(input: ValidateBasketInput!): ResponseForCreate

	createPayment(input: CreatePaymentInput!): ResponseForCreate

	createTravelersPasses(input: CreateTravelersPassesInput!): ResponseForCreate
	burnAttractionTicket(input: BurnAttractionTicketInput!): ResponseForCreate
}

scalar Date
