interface ResponseMutation {
	message: String
	code: Int!
}


type Attraction {
  _id: ID!
  name: String!
  description: String
  price: Float
  type: String
}

input AttractionCreate {
	name: String!
	price: Float
	type: String
	description: String
	link: String
}

input UserSigningIn {
	email: String!
	password: String!
}

input UserSigningUp {
	email: String!
	first_name: String
	last_name: String
	password: String!
	gender: Gender
	birthdate: Date
}

input BasketChoice {
	attraction_id: ID
	user_id: ID
	quantity: Int
}

input BasketValidate {
	basket_id: ID
	user_id: ID
	state: String
}

input BasketUpdate {
    last_update_time: Date
    choices: [BasketChoice]
}

input BasketCreate {
	init_time: Date
	last_update_time: Date
	user_id: ID
	choices: [BasketChoice]
}

input PaymentCreate {
	amount: Float

}

type UserCredentials implements ResponseMutation {
	message: String
	code: Int!
	token: String
}

type UserTokenToId implements ResponseMutation {
	message: String
	code: Int!
	id: ID
}

type ResponseForCreate implements ResponseMutation {
	message: String,
	code: Int!,
	id: ID
}

type User {
  _id: ID!
  email: String!
  first_name: String
  last_name: String
  birthdate: Date
  gender: Gender
  type: UserType
}

type QrGenerator {
  value: String
}

enum Gender {
  M
  F
  O
}

enum UserType {
  STAFF
  MUNICIPALITY
  PARTNER
  TOURIST
}

type Query {
    AttractionGet(id: ID!): Attraction
    AttractionGetAll(limit: Int, sortField: String, sortOrder: String): [Attraction]

    UserGet(id: ID!): User
    UserGetAll(limit: Int, sortField: String, sortOrder: String): [User]

    QrGetValue(token: String): String
    QrRead(data: String): User

	TokenConvertToId(token: String): UserTokenToId
}

type Mutation {
   signIn(user: UserSigningIn): UserCredentials
   signUp(user: UserSigningUp): UserCredentials

   attractionCreate(attraction: AttractionCreate): ResponseForCreate
   qrGenerate(userId: String): QrGenerator

	basketCreate(basket: BasketCreate): ResponseForCreate
	basketUpdate(basket: BasketUpdate): ResponseForCreate
	basketValidate(payment: BasketValidate): ResponseForCreate

	paymentCreate(payment: PaymentCreate): ResponseForCreate
}

scalar Date
