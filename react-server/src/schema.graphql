scalar Date

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

enum Gender {
	M
	F
	O
}

enum UserType {
	STAFF
	MUNICIPALITY
	PARTNER
	TOURIST
}

enum ActivityType {
	ATTRACTION
	RESTAURANT
	EVENT
}

enum PassDiscountType {
	RAW
	PERCENT
}

enum ItemType {
	PASS
	ATTRACTION
	RESTAURANT
	EVENT
	TASTING_SESSION
}

enum BasketState {
	PENDING,
	HALF_PAID,
	PAID
}

enum ScanState {
	SUCCESS,
	PENDING,
	NOT_FOUND,
	ALREADY_USED,
	ERROR
}

enum EntryState {
	ACCEPTED,
	WRONG_PERSON,
	WRONG_DETAILS,
	NO_IDENTITY_PROOF,
	IN_BAD_STATE,
	OTHER
}

enum StatusCode {
	SUCCESS
	SERVER_SIDE_ERROR
	CLIENT_SIDE_ERROR
}

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

type Status {
	code: StatusCode!
	message: String
}

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

type Address {
	street: String!
	supplement: String
	city: String!
	postcode: String!
	country: String
}

type ActivityOpeningTimes {
	timeSlot: String
	secondTimeSlot: String
}

type ActivityPrice {
	adult: Float!
	child: Float
	student: Float
	maxAgeForChild: Int
}

type Activity {
	id: ID!
	name: String!
	description: String
	price: ActivityPrice!
	noQueuing: Boolean!
	link: String
	type: String!
	address: Address!
	openingTimes: [ActivityOpeningTimes]
	images: [String]
}

type StudentStatus {
	isValidated: Boolean!
	expirationDate: Date
}

type User {
	id: ID!
	email: String!
	firstName: String
	lastName: String
	birthdate: Date
	gender: Gender
	type: UserType
	address: Address
	studentStatus: StudentStatus
}

type BasketItem {
	itemId: ID!
	type: ItemType!
	userId: ID!
	quantity: Int!
}

type Basket {
	id: ID!
	userId: ID
	items: [BasketItem]!
}

type Payment {
	id: ID!
	amount: Float!
	state: String!
	userId: ID!
	basketID: ID!
}

type ActivityTicket {
	id: ID!
	activityId: ID!
	usedTime: Date
	passId: ID
}

type Pass {
	id: ID!
	userId: ID!
	travelerId: ID!
	tickets: [ActivityTicket]!
}

type PassDiscount {
	type: PassDiscountType!
	amount: Float!
}

type VuegoPass {
	id: ID
	name: String
	description: String
	destination: String!
	discount: PassDiscount
	price: Float!
	activities: [Activity]!
}

type TravelDetails {
	destination: String!
	startDate: Date!
	endDate: Date!
	numberOfTravelers: Int!
}

type Traveler {
	id: ID!
	firstName: String!
	lastName: String
}

type TokenToId {
	status: Status!
	id: ID
	token: String!
}

type Scan {
	id: ID!
	userId: ID!
	activityId: ID!
	timestamp: Date!
	state: ScanState!
	qr: String!
}

type Entry {
	id: ID!
	timestamp: Date!
	userId: ID!
	activityId: ID!
	scanId: ID!
	state: EntryState!
	comment: String
}

type GetPassPayload {
	passes: [Pass]
}

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

type Query {
    getActivityById(id: ID!): Activity
    getActivitiesByType(type: ActivityType!): [Activity]
    getAllActivities(limit: Int, sortField: String, sortOrder: String): [Activity]

    getTravelDestinations(limit: Int): [String]!

    getUserById(id: ID!): User
    getUserByScanId(scanId: ID!): User
    getTravelersByUserId(userId: ID!): [Traveler]!
    getAllUsers(limit: Int, sortField: String, sortOrder: String): [User]

	getTravelerByQr(qr: String!): Traveler


    getQrByToken(token: String!): String
    getQrByUserId(userId: ID!): String
    readQr(data: String): User

	convertTokenToId(token: String): TokenToId

	getTicketByQrAndActivityId(qr: String!, activityId: ID!): ActivityTicket
	getTicketByTravelerIdAndActivityId(travelerId: ID!, activityId: ID!): ActivityTicket

	getUserTravels(userId: ID!): [TravelDetails]!

	getPassesByUserId(userId: ID!): GetPassPayload!
	getPassesByTravelerId(travelerId: ID!): GetPassPayload!
	getPassesByQr(qr: String!): GetPassPayload!

	getVuegoPassMustDo(destination: String!): VuegoPass
}

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

input SignInInput {
	email: String!
	password: String!
}

input SignUpInput {
	email: String!
	firstName: String
	lastName: String
	password: String!
	gender: Gender
	birthdate: Date
}

input CreateTravelerInput {
	firstName: String!
	lastName: String
	isStudent: Boolean
	birthdate: Date
}

input ActivityPriceInput {
	adult: Float!
	child: Float
	student: Float
	maxAgeForChild: Int
}
input ActivityOpeningTimesInput {
	timeSlot: String
	secondTimeSlot: String
}

input AddressInput {
	street: String!
	supplement: String
	city: String!
	postcode: String!
	country: String!
}

input CreateActivityInput {
	name: String!
	price: ActivityPriceInput!
	address: AddressInput!
	openingTimes: [ActivityOpeningTimesInput]!
	type: ActivityType!
	description: String
	link: String
	noQueuing: Boolean
	isAMustDo: Boolean
	images: [Upload]
}

input GenerateQrInput {
	userId: ID!
}

input BasketItemInput {
	itemId: ID!
	type: ItemType!
	userId: ID!
	quantity: Int!
}

input BasketInput {
	id: ID
	userId: ID
	initTime: Date
	lastUpdateTime: Date
	items: [BasketItemInput]!
}

input CreateBasketInput {
	initTime: Date!
	lastUpdateTime: Date!
	userId: ID
	items: [BasketItemInput]!
}

input UpdateBasketInput {
	basketId: ID!
    lastUpdateTime: Date!
    userId: ID
    items: [BasketItemInput]!
}

input ValidateBasketInput {
	basketId: ID!
	userId: ID!
	state: BasketState!
}

input PassTicketInput {
	activityId: ID!
	quantity: Int!
}

input PassInput {
	userId: ID!
	travelerId: ID!
	tickets: [PassTicketInput]!
}

input CreatePassInput {
	basketId: ID!
	startDate: Date!
	endDate: Date!
	destination: String!
	pass: PassInput
}

input BurnActivityTicketInput {
	timestamp: Date!
	ticketId: ID!
}

input CreatePaymentInput {
	amount: Float!
}

input GetPassByUserIdInput {
	userId: ID!
}

input GetPassByTravelerIdInput {
	travelerId: ID!
}

input CreateScanInput {
	activityId: ID!
	userId: ID!
	qr: String!
	state: ScanState!
	timestamp: Date!
}

input UpdateScanStateInput {
	id: ID!
	state: ScanState!
}

input CreateEntryInput {
	timestamp: Date!
	userId: ID!
	activityId: ID!
	scanId: ID!
	state: EntryState!
	comment: String
}


# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

type UserCredentials {
	status: Status!
	token: String
	errorMessage: String
}

type CreateTravelerPayload {
	status: Status!
	traveler: Traveler
}

type CreateActivityPayload {
	status: Status!
}

type GenerateQrPayload {
	status: Status!
	qrId: ID
	userId: ID!
}

type CreateBasketPayload {
	status: Status!
	basket: Basket!
}

type UpdateBasketPayload {
	status: Status!
	basket: Basket!
}

type ValidateBasketPayload {
	status: Status!
	basketId: ID!
	userId: ID!
}

type CreatePaymentPayload {
	status: Status!
	payment: Payment!
}

type CreatePassPayload {
	status: Status!
	pass: Pass!
}

type BurnActivityTicketPayload {
	status: Status!
	pass: Pass!
}

type CreateScanPayload {
	status: Status!
	scan: Scan!
}

type UpdateScanStatePayload {
	status: Status!
	scan: Scan
}

type CreateEntryPayload {
	status: Status!
	entry: Entry
}

# --------------------------------------------------------
# --------------------------------------------------------
# --------------------------------------------------------

type Mutation {
	signIn(input: SignInInput!): UserCredentials!
	signUp(input: SignUpInput!): UserCredentials!
	createTraveler(input: CreateTravelerInput!): CreateTravelerPayload!

	createActivity(input: CreateActivityInput!): CreateActivityPayload!
    
    generateQr(input: GenerateQrInput!): GenerateQrPayload!

	createBasket(input: CreateBasketInput!): CreateBasketPayload!
	updateBasket(input: UpdateBasketInput!): UpdateBasketPayload!
	validateBasket(input: ValidateBasketInput!): ValidateBasketPayload!

	createPayment(input: CreatePaymentInput!): CreatePaymentPayload!

	createPass(input: CreatePassInput!): CreatePassPayload!
	burnActivityTicket(input: BurnActivityTicketInput!): BurnActivityTicketPayload!

	createScan(input: CreateScanInput!): CreateScanPayload!
	updateScanState(input: UpdateScanStateInput!): UpdateScanStatePayload!

	createEntry(input: CreateEntryInput!): CreateEntryPayload!
}
